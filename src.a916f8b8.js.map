{"version":3,"sources":["src/card.js","src/fruits.js","src/index.js"],"names":["face","Card","x","y","src","size","m3m0","sizeOfCard","width","choosen","color","Math","floor","random","toString","startFlip","flipped","slice","ctx","img","Image","fillStyle","fillRect","drawImage","decision","grape","pineaple","peach","banana","lemon","mango","redApple","strawberry","cherries","greenApple","melon","waterMelon","pear","getShuffledArray","array","fruits","Object","values","i","amountOfCards","index","length","push","splice","concat","j","canvas","document","getElementById","getContext","cards","flippedCards","clickedTile","addCards","addResetBtn","addEventListener","event","clickHandler","draw","shuffledSrcs","gapBetwenCards","pop","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","is_selected","btn","createElement","reset","bind","setAttribute","innerText","body","appendChild","clearRect","height","drawFace","drawPic","check","requestId","requestAnimationFrame","first","second","setTimeout","flipDelay","amountOfFlippedCards","forEach","card","Number","timer","initGame"],"mappings":"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","file":"src.a916f8b8.js","sourceRoot":"..","sourcesContent":["import m3m0 from \"./index\"\r\nconst face = 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/microsoft/209/face-with-stuck-out-tongue-and-winking-eye_1f61c.png';\r\n\r\nexport default class Card {\r\n  constructor(x, y, src) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.src = src;\r\n    this.size = m3m0.sizeOfCard;\r\n    this.width = this.size;\r\n    this.choosen = false;\r\n    this.color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n    this.startFlip = false;\r\n    this.flipped = false;\r\n    this.slice = this.size / 7;\r\n  }\r\n\r\n  drawFace(ctx) {\r\n    let img = new Image();\r\n    img.src = face;\r\n    ctx.fillStyle = this.color;\r\n    ctx.fillRect(this.x, this.y, this.width, this.size);\r\n    ctx.drawImage(img, this.x + 5, this.y + 5, this.width - 10, this.size - 10);\r\n    if (this.startFlip) {\r\n      this.width -= this.slice\r\n    }\r\n    if (this.width <= this.slice) {\r\n     this.startFlip = false;\r\n      this.flipped = true;\r\n    }\r\n  }\r\n\r\n  drawPic(ctx) {\r\n    if(this.width<this.size){\r\n      this.width += this.slice\r\n    } else {\r\n      this.width = this.size;\r\n    }\r\n    let img = new Image();\r\n    img.src = this.src;\r\n    ctx.fillStyle = this.color;\r\n    ctx.fillRect(this.x, this.y, this.size, this.size);\r\n    ctx.drawImage(img, this.x + 5, this.y + 5, this.size - 10, this.size - 10);\r\n  }\r\n\r\n  is_selected(x, y) {\r\n    let decision = x >= this.x && x <= this.x + this.size && y >= this.y && y <= this.y + this.size;\r\n    if (decision) {\r\n      this.startFlip = true;\r\n    }\r\n    return decision\r\n  }\r\n}\r\n","import m3m0 from \"./index\"\r\n\r\nconst src = {\r\n     grape: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/microsoft/209/grapes_1f347.png',\r\n     pineaple: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/microsoft/209/pineapple_1f34d.png',\r\n     peach: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/microsoft/209/peach_1f351.png',\r\n     banana: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/microsoft/209/banana_1f34c.png',\r\n     lemon: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/160/microsoft/209/lemon_1f34b.png',\r\n     mango: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/microsoft/209/mango_1f96d.png',\r\n     redApple: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/microsoft/209/red-apple_1f34e.png',\r\n     strawberry: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/microsoft/209/strawberry_1f353.png',\r\n     cherries: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/microsoft/209/cherries_1f352.png',\r\n     greenApple: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/microsoft/209/green-apple_1f34f.png',\r\n     melon: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/microsoft/209/melon_1f348.png',\r\n     waterMelon: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/microsoft/209/watermelon_1f349.png',\r\n     pear: 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/microsoft/209/pear_1f350.png'\r\n};\r\n\r\nexport function getShuffledArray() {\r\n     let array = [];\r\n     let fruits = Object.values(src);\r\n\r\n     for (let i = 0; i < m3m0.amountOfCards/2; i++) {\r\n          let index = Math.floor(Math.random() * fruits.length);\r\n          array.push(fruits.splice(index, 1));\r\n     }\r\n     array = array.concat(array)\r\n\r\n     for (let i = array.length - 1; i > 0; i--) {\r\n          let j = Math.floor(Math.random() * (i + 1));\r\n          [array[i], array[j]] = [array[j], array[i]];\r\n     }\r\n     return array\r\n}","import Card from './card'\r\nimport * as fruits from './fruits'\r\n\r\nexport default class m3m0 {\r\n  static sizeOfCard = 140;\r\n  static gapBetwenCards = 10;\r\n  static amountOfCards = 10;\r\n  static flipDelay = 1000;\r\n\r\n  constructor() {\r\n    this.canvas = document.getElementById(\"canvas\");\r\n    this.ctx =  this.canvas.getContext(\"2d\");\r\n    this.cards  = [];\r\n    this.flippedCards = [];\r\n    this.clickedTile = 0;\r\n  }\r\n\r\n  initGame(){\r\n    this.addCards();\r\n    this.addResetBtn();\r\n    document.addEventListener(\"click\", (event) =>  this.clickHandler(event));\r\n    this.draw();\r\n  }\r\n\r\n  addCards(){\r\n    let shuffledSrcs = fruits.getShuffledArray();\r\n    let size = m3m0.sizeOfCard + m3m0.gapBetwenCards;\r\n    for (let i = 0; i < 5; i++) {\r\n      for(let j = 0; j < 2; j++) {\r\n        this.cards.push(new Card(i * size, j * size, shuffledSrcs.pop()));\r\n      }\r\n    }\r\n  }\r\n\r\n  clickHandler(event){\r\n    const rect = this.canvas.getBoundingClientRect();\r\n    const mouseX = event.clientX - rect.left;\r\n    const mouseY = event.clientY - rect.top;\r\n    for (let i = 0; i < this.cards.length; i++) {\r\n      if (this.clickedTile <= 1 && this.cards[i].is_selected(mouseX, mouseY) && this.cards[i].choosen !== true) {\r\n        this.cards[i].choosen = true;\r\n        this.flippedCards.push(i);\r\n        this.clickedTile++;\r\n      }\r\n    }\r\n  }\r\n\r\n  addResetBtn(){\r\n    this.btn = document.createElement('button');\r\n    this.btn.addEventListener('click',this.reset.bind(this));\r\n    this.btn.setAttribute('id','reset');\r\n    this.btn.innerText = 'Reset';\r\n    document.body.appendChild(this.btn);\r\n  }\r\n\r\n  draw(){\r\n    //draws frame\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    for (let i = 0; i < this.cards.length; i++) {\r\n      if (this.cards[i].flipped === false) {\r\n        this.cards[i].drawFace(this.ctx);\r\n      } else {\r\n        this.cards[i].drawPic(this.ctx);\r\n      }\r\n    }\r\n    this.check();\r\n    this.requestId = requestAnimationFrame(this.draw.bind(this));\r\n  }\r\n\r\n  check() {\r\n    //checks if the chosen cards match\r\n    if (this.flippedCards.length === 2) {\r\n      let first = this.flippedCards[0];\r\n      let second = this.flippedCards[1];\r\n  \r\n      if (this.cards[first].src === this.cards[second].src) {\r\n        this.flippedCards = [];\r\n        this.clickedTile = 0;\r\n      } else {\r\n        setTimeout(()=>{\r\n          this.cards[first].flipped = false;\r\n          this.cards[second].flipped = false;\r\n          this.cards[first].choosen = false;\r\n          this.cards[second].choosen = false;\r\n          this.clickedTile = 0;\r\n        }, m3m0.flipDelay);\r\n      }\r\n      this.flippedCards = [];\r\n    }\r\n\r\n    //checks if all cards are flipped\r\n    let amountOfFlippedCards = 0;\r\n    this.cards.forEach((card)=>{\r\n      amountOfFlippedCards += Number(card.flipped);\r\n    });\r\n    if(amountOfFlippedCards === m3m0.amountOfCards) {\r\n      if(this.timer) return;\r\n      this.timer = setTimeout(()=>{\r\n        this.reset();\r\n        this.timer = null;\r\n      }, m3m0.flipDelay);\r\n    }\r\n  }\r\n  \r\n  reset() {\r\n    // set new cards\r\n    this.cards  = [];\r\n    this.flippedCards = [];\r\n    this.clickedTile = 0;\r\n    this.addCards()\r\n  }\r\n\r\n}\r\n\r\nnew m3m0().initGame();"]}